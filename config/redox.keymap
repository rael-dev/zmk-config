/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/* 
 * ------------------------------------------- START MOUSE RELATED MAPPINGS ------------------------------------------- 
 * #include <dt-bindings/zmk/mouse.h> 
 * 
 * #define U_MOUSE_MOVE_MAX 3000                   
 * #define U_MOUSE_SCROLL_MAX 50                    
 * #define U_MOUSE_MOVE_EXPONENT 1
 * #define U_MOUSE_MOVE_TIME 1000
 * #define U_MOUSE_MOVE_DELAY 0
 * #define U_MOUSE_SCROLL_EXPONENT 1
 * #define U_MOUSE_SCROLL_TIME 3000
 * #define U_MOUSE_SCROLL_DELAY 0
 * 
 * #undef MOVE_UP
 * #undef MOVE_DOWN
 * #undef MOVE_LEFT
 * #undef MOVE_RIGHT
 * 
 * #define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
 * #define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
 * #define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
 * #define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)
 * 
 * &mmv {
 *     acceleration-exponent = <U_MOUSE_MOVE_EXPONENT>;
 *     time-to-max-speed-ms = <U_MOUSE_MOVE_TIME>;
 *     delay-ms = <U_MOUSE_MOVE_DELAY>;
 * };
 * 
 * #undef SCROLL_UP
 * #undef SCROLL_DOWN
 * #undef SCROLL_LEFT
 * #undef SCROLL_RIGHT
 * 
 * #define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
 * #define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
 * #define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
 * #define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)
 * 
 * &mwh {
 *     acceleration-exponent = <U_MOUSE_SCROLL_EXPONENT>;
 *     time-to-max-speed-ms = <U_MOUSE_SCROLL_TIME>;
 *     delay-ms = <U_MOUSE_SCROLL_DELAY>;
 * };
 * 
 * &mt {
 *     tapping-term-ms = <1000>;
 *     flavor = "tap-preferred";
 * };
 * 
 * ------------------------------------------- END MOUSE RELATED MAPPINGS ------------------------------------------- 
 */

&lt {
    bindings = <&to>, <&kp>;

    tapping-term-ms = <500>;
};

/ {
    macros {
        macro_rename: macro_rename {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LC(R)>, <&macro_tap>, <&kp R>;
        };

        macro_pointer: macro_pointer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp MINUS>,
                <&macro_tap>,
                <&kp GREATER_THAN>;
        };

        macro_comment: macro_comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LC(K)>, <&macro_tap>, <&kp C>;
        };

        macro_uncomment: macro_uncomment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LC(K)>, <&macro_tap>, <&kp LC(U)>;
        };

        macro_cpp_header_hop: cpp_header_hop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp O>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "CPP_HEADER_HOP";
        };

        macro_find_member: macro_find_member {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp BACKSLASH>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "MACRO_FIND_MEMBER";
        };

        macro_context_actions: macro_context_actions {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp ENTER>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "MACRO_CONTEXT_ACTIONS";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_equals {
            timeout-ms = <50>;
            key-positions = <61 64>;
            bindings = <&kp EQUAL>;
            layers = <0 1>;
        };

        combo_switch_to_nums {
            timeout-ms = <50>;
            key-positions = <30 35>;
            bindings = <&to 1>;
            layers = <0>;
        };

        combo_switch_to_base {
            timeout-ms = <50>;
            key-positions = <35 30>;
            bindings = <&to 0>;
            layers = <1>;
        };

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <62 63>;
            timeout-ms = <50>;
            layers = <0 1>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <61 30>;
            timeout-ms = <50>;
            layers = <0 1>;
        };

        combo_to_wasd {
            bindings = <&to 3>;
            key-positions = <17 20>;
            timeout-ms = <200>;
            layers = <0 1 2>;
        };

        combo_from_wasd {
            bindings = <&to 0>;
            key-positions = <18 32>;
            timeout-ms = <200>;
            layers = <3>;
        };
    };

    behaviors {
        td_run: tap_dance_run {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp LC(F5)>, <&kp LA(F5)>;
        };

        td_left_bracket: tap_dance_left_bracket {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp LEFT_BRACE>,
                <&kp LEFT_BRACKET>;
        };

        td_right_bracket: tap_dance_right_bracket {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings =
                <&kp RIGHT_PARENTHESIS>,
                <&kp RIGHT_BRACE>,
                <&kp RIGHT_BRACKET>;
        };

        td_quotes: tap_dance_quotes {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        td_pointer: tap_dance_pointer {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp ASTERISK>, <&macro_pointer>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            // --------------------------------------------------------------------------------------------------------------------------------
            // | ESC   |  1  |  2  |   3   |  4  |  5  |                   ---                |  6    |  7    |  8    |  9   | 0  |    BKSP   |
            // | TAB   |  Q  |  W  |   E   |  R  |  T  |   (   |           ---        |  )    |  Y    |  U    |  I    |  O   | P  |     -     |
            // | CTRL  |  A  |  S  |   D   |  F  |  G  |   [   |           ---        |  ]    |  H    |  J    |  K    |  L   | ;  |     '     |
            // | SHIFT |  Z  |  X  |   C   |  V  |  B  | PG_UP | PG_DOWN | --- | HOME | END   |  N    |  M    |  ,    |  .   | /  | SHFT(RET) |
            // | CRTL  | ALT | GUI | LOWER |    GUI    | LOWER | SPACE   | --- | DEL  | SPACE |     RAISE     | LEFT  | DOWN | UP |   RIGHT   |

            bindings = <
&kp ESC           &kp F1    &kp F2    &kp F3  &kp F4  &kp F5                                                                  &kp F6  &kp F7  &kp F8      &kp F9         &kp F10   &kp DELETE
&kp TAB           &kp Q     &kp W     &kp E   &kp R   &kp T   &kp F14                                      &kp F15            &kp Y   &kp U   &kp I       &kp O          &kp P     &kp MINUS
&kp CAPS          &kp A     &kp S     &kp D   &kp F   &kp G   &td_left_bracket                             &td_right_bracket  &kp H   &kp J   &kp K       &kp L          &kp SEMI  &kp ENTER
&sk LEFT_SHIFT    &kp Z     &kp X     &kp C   &kp V   &kp B   &kp DELETE        &none         &kp C_PP     &kp F16            &kp N   &kp M   &kp COMMA   &kp DOT        &kp FSLH  &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &kp LALT  &kp LWIN  &none   &mo 2           &kp SPACE         &td_quotes    &td_pointer  &kp BACKSPACE              &mo 2   &kp DOLLAR  &kp BACKSLASH  &kp RALT  &kp RCTRL
            >;
        };

        NUMBERS+SYMBOLS {
            // ----------------------------------------------------------------------------------------------------------------------------
            // | ESC   |  1  |  2  |   3   |  4  |  5  |                   ---                |  6   |  7   |  8   |  9   |  0    |  DEL  |
            // | ESC   |  !  |  @  |   #   |  $  |  %  |   (   |           ---        |  )    |  ^   |  &   |  *   |  (   |  )    |  DEL  |
            // | CTRL  |  _  |  +  |   {   |  }  | "|" |   [   |           ---        |  ]    | HOME | PGUP | PRSC | UP   |  `    |   ~   |
            // | SHIFT | ESC | GUI |   (   |  )  |     | PG_UP | PG_DOWN | --- | HOME | END   | END  | PGDN | LEFT | DOWN | RIGHT |  RET  |
            // | CRTL  | ALT | GUI | LOWER |    GUI    | LOWER | SPACE   | --- | DEL  | SPACE |    RAISE    | LEFT | DOWN | UP    | RIGHT |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                    &trans  &trans  &trans  &trans        &trans    &trans
&trans  &none   &none   &none   &none   &none   &trans                    &trans  &none   &none   &none   &kp ASTERISK  &kp PLUS  &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &trans                    &trans  &kp N6  &kp N7  &kp N8  &kp N9        &kp N0    &trans
&trans  &none   &none   &none   &none   &none   &trans  &trans    &trans  &trans  &none   &none   &trans  &trans        &trans    &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans  &trans          &trans  &trans  &trans        &trans    &trans
            >;
        };

        NAVIGATION {
            // -----------------------------------------------------------------------------------------
            // |  F1   |  F2   |    F3    |    F4     |     F5     | F6 |                   ---                | F7  | F8  |  F9  |  F10 | F11 | F12        |
            // | TAB   |       |          |           |            |    | BOOTL |           ---        |  )    | BT1 | BT2 |  BT3 |  BT4 | BT5 | OUTPUT TGL |
            // | CTRL  | MUTE  |  Vol Dn  |  Vol Up   | Play/Pause |    | RESET |           ---        |  ]    | F1  | F2  |  F3  |  F4  | F5  | F6         |
            // | SHIFT | PSCRN |  PSCRN   |   CAPS    |            |    | PG_UP | PG_DOWN | --- | HOME | END   | F7  | F8  |  F9  |  F10 | F11 | F12        |
            // | CRTL  | ALT   |  GUI     |   LOWER   |      GUI        | LOWER | SPACE   | --- | DEL  | SPACE |   RAISE   | LEFT | DOWN | UP  |   RIGHT    |

            bindings = <
&trans  &trans         &trans              &trans                 &trans          &trans                                              &trans            &trans    &trans  &trans             &trans                  &trans
&trans  &none          &none               &macro_cpp_header_hop  &kp LC(LS(B))   &td_run           &trans                    &trans  &kp LC(LEFT)      &none     &none   &kp LC(RIGHT)      &none                   &trans
&trans  &kp LC(LS(F))  &macro_find_member  &kp LC(A)              &kp LC(C)       &kp LC(V)         &trans                    &trans  &kp LEFT          &kp DOWN  &kp UP  &kp RIGHT          &macro_context_actions  &trans
&trans  &kp LC(Z)      &none               &macro_rename          &macro_comment  &macro_uncomment  &trans  &trans    &trans  &trans  &kp LS(LC(LEFT))  &none     &none   &kp LC(LS(RIGHT))  &none                   &trans
&trans  &trans         &trans              &trans                 &trans                            &trans  &none     &trans  &trans                    &trans    &trans  &trans             &trans                  &trans
            >;
        };

        WASD {
            bindings = <
&trans  &kp N1     &kp N2  &kp N3  &kp N4  &kp N5                                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &none      &kp Q   &kp W   &kp E   &kp R   &kp I                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LSHFT  &kp A   &kp S   &kp D   &kp F   &kp M                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &none      &kp Z   &kp X   &kp C   &kp V   &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &trans  &mo 4           &trans  &kp RET    &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        BDO {
            bindings = <
&trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp T   &kp Y   &kp U   &kp I   &kp O   &kp P                        &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp G   &kp H   &kp J   &kp K   &kp L   &kp COMMA                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &none   &none   &kp B   &kp N   &kp M   &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans     &trans    &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
